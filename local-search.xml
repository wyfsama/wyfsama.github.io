<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>you-get+ffmpeg提取视频BGM</title>
    <link href="/2021/05/10/6.you-get+FFMpeg%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91BGM/"/>
    <url>/2021/05/10/6.you-get+FFMpeg%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91BGM/</url>
    
    <content type="html"><![CDATA[<p><code>you-get [URL]</code></p><p><code>ffmpeg -i [input(video)] [ouput(music)]</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>FFMpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome标签脚本</title>
    <link href="/2021/05/09/5-chrome%E6%A0%87%E7%AD%BE%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/05/09/5-chrome%E6%A0%87%E7%AD%BE%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<style>.chromePlugins{    display:block;    position: relative;    margin：5px 0;    color: white !important;    width: 200px;    height: 50px;    border-radius: 50px;    text-align: center;    line-height: 50px;    text-decoration: none !important;    background: linear-gradient(to right,#3498db,#2ecc71,#e67e22,#3498db);    background-size:400%;}body{    background: black;}.chromePlugins:hover{    animation: flow 6s linear infinite;}.chromePlugins:hover::after{    animation: flow 6s linear infinite;    filter: blur(30px);}.chromePlugins::after{    content: "";    position: absolute;    left: -5px;    top: -5px;    right: -5px;    bottom: -5px;    border-radius: 60px;    background: white;    z-index: -1;    background: linear-gradient(to right,#3498db,#2ecc71,#e67e22,#3498db);    background-size:400%;}@keyframes flow{    100%{        background-position: -400%;    }}</style><h4 id="整活背景"><a href="#整活背景" class="headerlink" title="整活背景"></a>整活背景</h4><p>浏览B站或者看微信公众号文章的时候，发现很多好图的时候（尤其是一些纸片人老婆的图），很想将其下载下来。这时候就需要F12审查元素，找到图片链接，再另存到本地。苦于喜欢的纸片人老婆实在太多，这样的方法就会显得很笨了。这时候就需要好朋友JS来帮忙了！</p><h4 id="插件宗旨"><a href="#插件宗旨" class="headerlink" title="插件宗旨"></a>插件宗旨</h4><p>没必要的事就不做,必要的事就尽快做。–《冰菓》</p><h4 id="插件大全（持续更新中）"><a href="#插件大全（持续更新中）" class="headerlink" title="插件大全（持续更新中）"></a>插件大全（持续更新中）</h4><ul><li><p>获取B站视频封面</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:window.open(document.querySelector('[itemprop=\'image\']').content)">获取B站视频封面</a><div></li><li><p>获取微信文章封面</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:let imgUrl=document.querySelector('[property=\'twitter:image\']').content;window.open(imgUrl)">获取微信文章封面</a><div></li><li><p>网页双屏</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:document.write('<HTML><HEAD></HEAD><FRAMESET COLS=\'50%25,*\'><FRAME SRC=' + location.href + '><FRAME SRC=' + location.href + '></FRAMESET></HTML>')">网页双屏</a><div></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探究数组方法的使用技巧</title>
    <link href="/2021/04/14/3.%E6%8E%A2%E7%A9%B6%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/04/14/3.%E6%8E%A2%E7%A9%B6%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="探究数组方法的使用技巧"><a href="#探究数组方法的使用技巧" class="headerlink" title="探究数组方法的使用技巧"></a>探究数组方法的使用技巧</h1><h2 id="转字符方法"><a href="#转字符方法" class="headerlink" title="转字符方法"></a>转字符方法</h2><h4 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString"></a>Array.prototype.toString</h4><p><code>Array.prototype.toString</code> 数组无论被嵌套多少层都会被转成 <code>String</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],<span class="hljs-number">4</span>],<span class="hljs-number">1</span>] <br>arr.toString()     <span class="hljs-comment">//1,2,3,4,4,1</span><br></code></pre></div></td></tr></table></figure><h4 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join"></a>Array.prototype.join</h4><p><code>Array.prototype.join</code> 将数组各成员按照某字符串进行连接并且装换成 <code>String</code>，与<code>String.prototype.split</code> 相对应</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr.join())     <span class="hljs-comment">//1,2,3 </span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&#x27;&#x27;</span>))   <span class="hljs-comment">//123</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&#x27; &#x27;</span>))  <span class="hljs-comment">//1 2 3</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&#x27;-&#x27;</span>))  <span class="hljs-comment">//1-2-3</span><br></code></pre></div></td></tr></table></figure><h2 id="堆栈方法"><a href="#堆栈方法" class="headerlink" title="堆栈方法"></a>堆栈方法</h2><h4 id="Array-prototype-push-Array-prototype-pop"><a href="#Array-prototype-push-Array-prototype-pop" class="headerlink" title="Array.prototype.push  Array.prototype.pop"></a>Array.prototype.push  Array.prototype.pop</h4><p><code>Array.prototype.push</code> 数组末尾添加元素 ，返回长度</p><p><code>Array.prototype.pop</code>  数组末尾去除元素 ，返回去除项</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr,arr.push(<span class="hljs-number">5</span>)); <span class="hljs-comment">//[ 1, 2, 3, 5 ] 4</span><br><span class="hljs-built_in">console</span>.log(arr,arr.pop());   <span class="hljs-comment">//[ 1, 2, 3 ] 5</span><br></code></pre></div></td></tr></table></figure><h4 id="Array-prototype-unshift-Array-prototype-shift"><a href="#Array-prototype-unshift-Array-prototype-shift" class="headerlink" title="Array.prototype.unshift  Array.prototype.shift"></a>Array.prototype.unshift  Array.prototype.shift</h4><p><code>Array.prototype.unshift</code> 数组头部添加元素 ，返回长度</p><p><code>Array.prototype.shift</code>  数组头部去除元素 ，返回去除项</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr= [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr,arr.unshift(<span class="hljs-number">5</span>)); <span class="hljs-comment">//[ 5, 1, 2, 3 ] 4</span><br><span class="hljs-built_in">console</span>.log(arr,arr.shift());    <span class="hljs-comment">//[ 1, 2, 3 ] 5</span><br></code></pre></div></td></tr></table></figure><blockquote><p>堆栈方法均改变原数组</p></blockquote><h2 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h2><h4 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse"></a>Array.prototype.reverse</h4><p><code>Array.prototype.reverse </code> 排序和其中元素大小无关，反转数组，<strong>改变原数组</strong> ， 视觉上反转数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr= [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr,arr.reverse())  <span class="hljs-comment">//[ 3, 2, &#x27;a&#x27; ] [ 3, 2, &#x27;a&#x27; ]</span><br></code></pre></div></td></tr></table></figure><h4 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a>Array.prototype.sort</h4><p><code>Array.prototype.sort</code>  </p><p>当<code>arr.sort()</code>不传入函数时，会将数组数组中的各元素转成 <code>String</code> , 再按照每个 <code>String</code> 的 <code>Unicode</code> 编码大小比较，进行升序排列，<strong>改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">50</span>]<br><span class="hljs-built_in">console</span>.log(&#123;                <br>    a: <span class="hljs-string">&#x27;a&#x27;</span>.charCodeAt(),<br>    c: <span class="hljs-string">&#x27;c&#x27;</span>.charCodeAt(),<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;1&#x27;</span>.charCodeAt(),<br>    <span class="hljs-number">50</span>: <span class="hljs-string">&#x27;50&#x27;</span>.charCodeAt()   <span class="hljs-comment">//&#123; &#x27;1&#x27;: 49, &#x27;50&#x27;: 53, a: 97, c: 99 &#125;</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr.sort())     <span class="hljs-comment">//[ 1, 50, &#x27;a&#x27;, &#x27;c&#x27; ]</span><br></code></pre></div></td></tr></table></figure><blockquote><p> 针对元素为数字字符串和数字的排序</p></blockquote><p><code>Array.prototype.sort </code> 为 <strong>高阶函数</strong> ，给其传入一个 <strong>回调函数</strong> ，根据返回值不同可以控制 <em>升序</em> 或者 <em>降序</em></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">50</span>]<br><span class="hljs-built_in">console</span>.log(arr.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span><br>    a-b      <span class="hljs-comment">// 返回a-b，即为从小到大，升序排列  //返回b-a，即为从大到小，降序排列</span><br>))<br></code></pre></div></td></tr></table></figure><h2 id="拼接方法"><a href="#拼接方法" class="headerlink" title="拼接方法"></a>拼接方法</h2><h4 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat"></a>Array.prototype.concat</h4><p><code>Array.prototype.concat </code> 主要用于拼接数组，<strong>返回新数组，不改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-built_in">console</span>.log(arr.concat(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)，arr); <span class="hljs-comment">// [ 1, 2, 1, 2 ] [ 1, 2 ]</span><br><span class="hljs-built_in">console</span>.log(arr.concat([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])，arr); <span class="hljs-comment">// [ 1, 2, 1, 2 ] [ 1, 2 ]</span><br><span class="hljs-built_in">console</span>.log(arr.concat([<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>])，arr); <span class="hljs-comment">// [ 1, 2, 1,[ 2 ]] [ 1, 2 ]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>等价于使用 <strong>展开运算符</strong> 拼接数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">console</span>.log([...arr, ...arr1])  <span class="hljs-comment">//[ 1, 2, 1, 2 ]</span><br></code></pre></div></td></tr></table></figure><h2 id="删改方法"><a href="#删改方法" class="headerlink" title="删改方法"></a>删改方法</h2><h4 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice"></a>Array.prototype.slice</h4><p><code>Array.prototype.slice(start,end) </code> 从数组<code>start</code>项截取到<code>end</code>项，左闭右开，返回截取元素组成的新数组，<strong>不改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">console</span>.log(arr.slice(), arr);     <span class="hljs-comment">//[ 1, 2, 3, 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">0</span>), arr);    <span class="hljs-comment">//[ 1, 2, 3, 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>), arr);    <span class="hljs-comment">//[ 2, 3, 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(-<span class="hljs-number">1</span>), arr);   <span class="hljs-comment">//[ 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), arr); <span class="hljs-comment">//[ 2, 3 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(-<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>), arr);<span class="hljs-comment">//[ 2, 3 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), arr);  <span class="hljs-comment">//[] [ 1, 2, 3, 4 ] end&gt;start则返回空数组</span><br><br></code></pre></div></td></tr></table></figure><h4 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice"></a>Array.prototype.splice</h4><p><code>Array.prototype.splice(start,删除的个数,添加的值) </code> 可以删除或添加值，返回删除的值，<code>改变原数组</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>), arr) <span class="hljs-comment">//[ 1, 2 ] [ 4, 3 ]</span><br></code></pre></div></td></tr></table></figure><h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><h4 id="Array-prototype-indexOf-amp-Array-prototype-lastIndexOf"><a href="#Array-prototype-indexOf-amp-Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.indexOf &amp;  Array.prototype.lastIndexOf"></a>Array.prototype.indexOf &amp;  Array.prototype.lastIndexOf</h4><p><code>Array.prototype.index</code> 正向查询某值在数组中的位置，有即返回索引</p><p><code>Array.prototype.lastIndexOf</code> 反向查询某值在数组中的位置，有即返回索引</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">2</span>))  <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(arr.lastIndexOf(<span class="hljs-number">2</span>))   <span class="hljs-comment">// 3</span><br></code></pre></div></td></tr></table></figure><h4 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h4><p><code>Array.prototype.includes</code> 查询是否有值，有即返回 <code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">2</span>)) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈冒泡和捕获</title>
    <link href="/2021/04/01/2.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    <url>/2021/04/01/2.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>了解冒泡和捕获之前，先要了解什么是事件和事件流</p></blockquote><span id="more"></span><p><strong>事件</strong> ：事件是可以被JS检测到的行为，当我们与页面交互时，事件就会产生</p><p><strong>事件流</strong> ：触发事件会产生事件流，单个元素受到影响后会传播给其他元素，事件流描述的是页面中接受事件的顺序，分为<strong>冒泡</strong>和<strong>捕获</strong></p><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a><strong>冒泡</strong></h4><blockquote><p>一个子元素触发事件后，事件会从该子元素起一层一层向上传播，从下往上</p></blockquote><pre><code class=" mermaid">graph BTdiv --&gt; body --&gt; html --&gt; document</code></pre><h4 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h4><blockquote><p>一个子元素触发事件后，事件会从最顶层父级一层一层向下传播，从下往上</p></blockquote><pre><code class=" mermaid">graph TBdocument --&gt; html --&gt; body --&gt; div</code></pre><h4 id="三种事件监听函数下的事件流"><a href="#三种事件监听函数下的事件流" class="headerlink" title="三种事件监听函数下的事件流"></a>三种事件监听函数下的事件流</h4><p>1.直接在<code>html</code>中定义事件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        #father&#123;<br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: blue;</span><br>        &#125;<br>        #son&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: red;</span><br>        &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;father&#x27;)&quot;</span>&gt;</span> //点击#father而不点击#son 只会输出father<br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;son&#x27;)&quot;</span>&gt;</span> // 点击#son 依次输出son father，属于冒泡<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>结论：直接在<code>html</code>中定义事件只会冒泡</p><p>2.<code>DOM0 </code>级 事件 </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      #father &#123;<br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br>      &#125;<br>      #son &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br>      &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span>  //点击#father而不点击#son 只会输出father<br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  // 点击#son 依次输出son father，属于冒泡<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      <br><span class="javascript">      father.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;father&quot;</span>);</span><br>      &#125;;<br>      <br><span class="javascript">      son.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;      </span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;son&quot;</span>);</span><br>      &#125;;<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>结论：<code>dom0</code> 只会冒泡</p><blockquote><p>html行内绑定事件和dom0级别一样 </p></blockquote><p>3.<code>DOM2</code>级 事件 </p><blockquote><p> <code>dom2 </code> 级格式为 <code>el.addEventListener(&#39;click&#39;,fn,false)</code> 其中 <code>dom2 </code>级第三个默认 <code>false</code>，改为 <code>true</code> 就变为事件捕获。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      #father &#123;<br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br>      &#125;<br>      #son &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br>      &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      father.addEventListener(<br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br>        () =&gt; &#123;<br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;father&quot;</span>);</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-literal">true</span></span><br>      );<br>    <br>      son.addEventListener(<br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br>        () =&gt; &#123;<br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;son&quot;</span>);</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-literal">true</span></span><br>      );<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>都是 <code>true</code> 的时候，father 和 son 都是捕获，输出father son，点击father 只输出 father</p></li><li><p>都是 <code>false</code> 的时候，father 和 son 都是冒泡，输出son father，点击father 只输出 father</p></li><li><p>father 事件监听函数参数为 <code>true</code> , son 事件监听函数参数为 <code>false</code> 时，father 为捕获，son 为冒泡，输出father son，点击father 只输出 father</p></li><li><p>father 事件监听函数参数为 <code>false</code>, son 事件监听函数参数为 <code>true</code> 时，son为捕获，father为冒泡，输出son father，点击father 只输出 father</p></li></ul><blockquote><p>总结：</p><p>事件流的模型是自上而下捕获，到达目标，然后再自下而上冒泡。就像小球从空中落地再弹起。<br>1.事件捕获阶段<br>2.处于目标阶段<br>3.事件冒泡阶段</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于防抖和节流</title>
    <link href="/2021/03/30/1.%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2021/03/30/1.%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖  debounce"></a>防抖  <span class="label label-primary">debounce</span></h2><p class="note note-primary">在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。</p><p><code>防抖</code> 类似于游戏里的 <code>施法前摇</code> ，只有当前摇吟唱事件结束时，才能触发技能。</p><p><strong>实际场景</strong>：在输入框里输入一段文字，不断触发某事件，如向后台一直发送数据，故需要防抖来控制此时不断执行的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>);<br><br><span class="hljs-keyword">let</span> timer;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">300</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>          <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;<br>          timer = <span class="hljs-built_in">setTimeout</span>(fn, delay);<br>    &#125;;<br>&#125;<br><br>input.onkeydown = debounce(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(input.value), <span class="hljs-number">1000</span>); <br></code></pre></div></td></tr></table></figure><p>利用闭包封装一个 <code>debounce</code> 函数,从而达到1s内在 <code>input</code> 框反复按键里不会触发事件，若停下按键操作1s后触发事件。</p><!-- more --><h2 id="节流-throttling"><a href="#节流-throttling" class="headerlink" title="节流 throttling"></a>节流 <span class="label label-success">throttling</span></h2><p class="note note-success">每隔一段时间，只执行一次函数。</p><p><code>节流</code> 类似于游戏里的 <code>技能CD</code> ，一段时间只执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttling</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">1000</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>,<span class="hljs-built_in">arguments</span>)<br>      timer = <span class="hljs-literal">null</span>;<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><br>div.ondrag = throttling(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(e.offsetX));<br></code></pre></div></td></tr></table></figure><p>利用闭包封装一个 <code>throttling</code> 函数,从而达到拖拽 <code>div</code> 时每1s触发一次事件。</p>]]></content>
    
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我自学编程的二三事</title>
    <link href="/2021/03/30/%E5%85%B3%E4%BA%8E%E6%88%91%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B%E8%BF%99%E6%A1%A3%E4%BA%8B/"/>
    <url>/2021/03/30/%E5%85%B3%E4%BA%8E%E6%88%91%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B%E8%BF%99%E6%A1%A3%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<p>Lets see who is real evil genius !</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
