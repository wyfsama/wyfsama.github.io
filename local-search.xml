<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈冒泡和捕获</title>
    <link href="/2021/04/01/2.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    <url>/2021/04/01/2.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>了解冒泡和捕获之前，先要了解什么是事件和事件流</p></blockquote><span id="more"></span><p><strong>事件</strong> ：事件是可以被JS检测到的行为，当我们与页面交互时，事件就会产生</p><p><strong>事件流</strong> ：触发事件会产生事件流，单个元素受到影响后会传播给其他元素，事件流描述的是页面中接受事件的顺序，分为<strong>冒泡</strong>和<strong>捕获</strong></p><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a><strong>冒泡</strong></h4><blockquote><p>一个子元素触发事件后，事件会从该子元素起一层一层向上传播，从下往上</p></blockquote><pre><code class=" mermaid">div --&gt; body --&gt; html --&gt; document</code></pre><h4 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h4><blockquote><p>一个子元素触发事件后，事件会从最顶层父级一层一层向下传播，从下往上</p></blockquote><pre><code class=" mermaid">document --&gt; html --&gt; body --&gt; div</code></pre><h4 id="三种事件监听函数下的事件流"><a href="#三种事件监听函数下的事件流" class="headerlink" title="三种事件监听函数下的事件流"></a>三种事件监听函数下的事件流</h4><p>1.直接在<code>html</code>中定义事件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        #father&#123;<br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: blue;</span><br>        &#125;<br>        #son&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: red;</span><br>        &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;father&#x27;)&quot;</span>&gt;</span> //点击#father而不点击#son 只会输出father<br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;son&#x27;)&quot;</span>&gt;</span> // 点击#son 依次输出son father，属于冒泡<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>结论：直接在<code>html</code>中定义事件只会冒泡</p><p>2.<code>DOM0 </code>级 事件 </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      #father &#123;<br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br>      &#125;<br>      #son &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br>      &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span>  //点击#father而不点击#son 只会输出father<br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  // 点击#son 依次输出son father，属于冒泡<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      <br><span class="javascript">      father.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;father&quot;</span>);</span><br>      &#125;;<br>      <br><span class="javascript">      son.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;      </span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;son&quot;</span>);</span><br>      &#125;;<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>结论：<code>dom0</code> 只会冒泡</p><blockquote><p>html行内绑定事件和dom0级别一样 </p></blockquote><p>3.<code>DOM2</code>级 事件 </p><blockquote><p> <code>dom2 </code> 级格式为 <code>el.addEventListener(&#39;click&#39;,fn,false)</code> 其中 <code>dom2 </code>级第三个默认 <code>false</code>，改为 <code>true</code> 就变为事件捕获。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      #father &#123;<br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br>      &#125;<br>      #son &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br>      &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      father.addEventListener(<br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br>        () =&gt; &#123;<br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;father&quot;</span>);</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-literal">true</span></span><br>      );<br>    <br>      son.addEventListener(<br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br>        () =&gt; &#123;<br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;son&quot;</span>);</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-literal">true</span></span><br>      );<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>都是 <code>true</code> 的时候，father 和 son 都是捕获，输出father son，点击father 只输出 father</p></li><li><p>都是 <code>false</code> 的时候，father 和 son 都是冒泡，输出son father，点击father 只输出 father</p></li><li><p>father 事件监听函数参数为 <code>true</code> , son 事件监听函数参数为 <code>false</code> 时，father 为捕获，son 为冒泡，输出father son，点击father 只输出 father</p></li><li><p>father 事件监听函数参数为 <code>false</code>, son 事件监听函数参数为 <code>true</code> 时，son为捕获，father为冒泡，输出son father，点击father 只输出 father</p></li></ul><blockquote><p>总结：</p><p>事件流的模型是自上而下捕获，到达目标，然后再自下而上冒泡。就像小球从空中落地再弹起。<br>1.事件捕获阶段<br>2.处于目标阶段<br>3.事件冒泡阶段</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于防抖和节流</title>
    <link href="/2021/03/30/1.%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2021/03/30/1.%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖  debounce"></a>防抖  <span class="label label-primary">debounce</span></h2><p class="note note-primary">在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。</p><p><code>防抖</code> 类似于游戏里的 <code>施法前摇</code> ，只有当前摇吟唱事件结束时，才能触发技能。</p><p><strong>实际场景</strong>：在输入框里输入一段文字，不断触发某事件，如向后台一直发送数据，故需要防抖来控制此时不断执行的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>);<br><br><span class="hljs-keyword">let</span> timer;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">300</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>          <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;<br>          timer = <span class="hljs-built_in">setTimeout</span>(fn, delay);<br>    &#125;;<br>&#125;<br><br>input.onkeydown = debounce(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(input.value), <span class="hljs-number">1000</span>); <br></code></pre></div></td></tr></table></figure><p>利用闭包封装一个 <code>debounce</code> 函数,从而达到1s内在 <code>input</code> 框反复按键里不会触发事件，若停下按键操作1s后触发事件。</p><span id="more"></span><h2 id="节流-throttling"><a href="#节流-throttling" class="headerlink" title="节流 throttling"></a>节流 <span class="label label-success">throttling</span></h2><p class="note note-success">每隔一段时间，只执行一次函数。</p><p><code>节流</code> 类似于游戏里的 <code>技能CD</code> ，一段时间只执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttling</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">1000</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>,<span class="hljs-built_in">arguments</span>)<br>      timer = <span class="hljs-literal">null</span>;<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><br>div.ondrag = throttling(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(e.offsetX));<br></code></pre></div></td></tr></table></figure><p>利用闭包封装一个 <code>throttling</code> 函数,从而达到拖拽 <code>div</code> 时每1s触发一次事件。</p>]]></content>
    
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我自学编程的二三事</title>
    <link href="/2021/03/30/%E5%85%B3%E4%BA%8E%E6%88%91%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B%E8%BF%99%E6%A1%A3%E4%BA%8B/"/>
    <url>/2021/03/30/%E5%85%B3%E4%BA%8E%E6%88%91%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B%E8%BF%99%E6%A1%A3%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
