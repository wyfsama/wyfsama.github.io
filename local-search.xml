<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一些不常用却很有用的NPM的命令</title>
    <link href="/2021/08/25/9.%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84NPM%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/25/9.%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%B4%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84NPM%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="一些不常用却很有用的NPM的命令"><a href="#一些不常用却很有用的NPM的命令" class="headerlink" title="一些不常用却很有用的NPM的命令"></a>一些不常用却很有用的NPM的命令</h1><blockquote><p>最近用 <code>vite</code> 发现老是不能下载最新的 <code>vue</code> ，只可以手动下载 <code>vue</code> 最新版，这个问题后面应该会被修复，但是苦于无法精确知道最新的 <code>vue</code> 版本号，故需要借助NPM这个包管理器来看 。</p></blockquote><h2 id="查看远程版本"><a href="#查看远程版本" class="headerlink" title="查看远程版本"></a>查看远程版本</h2><h3 id="查看所有的包版本信息"><a href="#查看所有的包版本信息" class="headerlink" title="查看所有的包版本信息"></a>查看所有的包版本信息</h3><p><code>npm view [module] versions</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">&gt; <span class="hljs-built_in">npm</span> view vue versions<br><br>[<br>  <span class="hljs-string">&#x27;0.0.0&#x27;</span>,          <span class="hljs-string">&#x27;0.6.0&#x27;</span>,                <span class="hljs-string">&#x27;0.7.0&#x27;</span>,<br>  <span class="hljs-string">&#x27;0.7.1&#x27;</span>,          <span class="hljs-string">&#x27;0.7.3&#x27;</span>,                <span class="hljs-string">&#x27;0.7.4&#x27;</span>,<br>  <span class="hljs-string">&#x27;0.7.5&#x27;</span>,          <span class="hljs-string">&#x27;0.7.6&#x27;</span>,                <span class="hljs-string">&#x27;0.8.0&#x27;</span>,<br>  <span class="hljs-string">&#x27;0.8.1&#x27;</span>,          <span class="hljs-string">&#x27;0.8.2&#x27;</span>,                <span class="hljs-string">&#x27;0.8.3&#x27;</span>,<br>  ...<br>]<br></code></pre></div></td></tr></table></figure><h3 id="查看包最新的版本信息"><a href="#查看包最新的版本信息" class="headerlink" title="查看包最新的版本信息"></a>查看包最新的版本信息</h3><p><code>npm view [module] version</code></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">&gt; npm view vue version<br><br>2.6.14<br></code></pre></div></td></tr></table></figure><h3 id="查出更多的关于包的信息"><a href="#查出更多的关于包的信息" class="headerlink" title="查出更多的关于包的信息"></a>查出更多的关于包的信息</h3><p><code>npm info [module]</code></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">&gt; npm info vue<br><br>vue@<span class="hljs-number">2.6</span>.<span class="hljs-number">14</span> | MIT | dep<span class="hljs-variable">s:</span> none | <span class="hljs-keyword">version</span><span class="hljs-variable">s:</span> <span class="hljs-number">345</span><br>Reactive, component-oriented <span class="hljs-keyword">view</span> layer <span class="hljs-keyword">for</span> modern web interfaces.<br>http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/vuejs/vue#readme<br><br>keyword<span class="hljs-variable">s:</span> vue<br><br>dist     // 一些关于包的说明<br>.tarbal<span class="hljs-variable">l:</span> http<span class="hljs-variable">s:</span>//repo.huaweicloud.<span class="hljs-keyword">com</span>/repository/npm/vue/-/vue-<span class="hljs-number">2.6</span>.<span class="hljs-number">14</span>.tgz<br>.shasum: e51aa5250250d569a3fbad3a8a5a687d6036e235<br>.integrity: sha512-x2284lgYvjOMj3Za7kqzRcUSxBboHqtgRE2zlos1qWaOye5yUmHn42LB1250NJBLRwEcdrB0JRwyPTEPhfQjiQ==<br>.unpackedSize: <span class="hljs-number">3.0</span> MB<br><br>maintainer<span class="hljs-variable">s:</span> // 作者信息<br>- posva &lt;posva13@gmail.<span class="hljs-keyword">com</span>&gt;<br>- yyx990803 &lt;yyx990803@gmail.<span class="hljs-keyword">com</span>&gt;<br><br>dist-<span class="hljs-keyword">tag</span><span class="hljs-variable">s:</span><br>bet<span class="hljs-variable">a:</span> <span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>-beta.<span class="hljs-number">8</span>  csp: <span class="hljs-number">1.0</span>.<span class="hljs-number">28</span>-csp     lates<span class="hljs-variable">t:</span> <span class="hljs-number">2.6</span>.<span class="hljs-number">14</span>      nex<span class="hljs-variable">t:</span> <span class="hljs-number">3.2</span>.<span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><blockquote><p>敲黑板，总结：目前用 <code>vite</code> 里面升级<code>vue</code> 的命令是 <code>npm i vue@next</code> 或者 <code>yarn add vue@next</code></p></blockquote><h2 id="查看本地版本和路径"><a href="#查看本地版本和路径" class="headerlink" title="查看本地版本和路径"></a>查看本地版本和路径</h2><h3 id="查看本地包路径"><a href="#查看本地包路径" class="headerlink" title="查看本地包路径"></a>查看本地包路径</h3><p><code>npm ls vue</code></p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">&gt; npm ls vue<br><br>test1@0.0.0 C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\w</span>yfsama<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\v</span>ite<span class="hljs-symbol">\t</span>est1<br>└── vue@3.2.6<br></code></pre></div></td></tr></table></figure><h3 id="查看全局包路径"><a href="#查看全局包路径" class="headerlink" title="查看全局包路径"></a>查看全局包路径</h3><p><code>npm ls vue -g</code></p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">&gt; npm <span class="hljs-keyword">ls</span> vue -g<br><br>C:\Users\wyfsama\AppData\Roaming\npm<br>└─┬ @vue/cli@4<span class="hljs-number">.5</span><span class="hljs-number">.9</span><br>  ├─┬ vue-codemod@0<span class="hljs-number">.0</span><span class="hljs-number">.4</span><br>  │ ├─┬ @vue/compiler-sfc@3<span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>  │ │ └── vue@2<span class="hljs-number">.6</span><span class="hljs-number">.12</span> deduped invalid<br>  │ └── vue@3<span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>  └── vue@2<span class="hljs-number">.6</span><span class="hljs-number">.12</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NodeJS</category>
      
      <category>NPM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>NPM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC &amp; IFC</title>
    <link href="/2021/08/12/8-BFC-IFC/"/>
    <url>/2021/08/12/8-BFC-IFC/</url>
    
    <content type="html"><![CDATA[<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>先回顾下一个老生常谈的题目，<strong>清除浮动</strong></p><blockquote><p>由于浮动属性会带来元素半脱离文档流状态（文字不脱离，毕竟浮动设计之初是为了文字的环绕服务的)，故造成父盒子的塌陷，这就引申出需要清除浮动的概念。</p></blockquote><p>方法如下：</p><p>1.给父盒子加一个空 <code>div</code>，给其设置<code>clear：both；</code></p><p>不推荐，语义化差</p><p>2.加一个内容为空的伪类，给其设置<code>clear：both；</code></p><p>推荐</p><p>3.利用 <code>BFC</code> 特性，给父盒子设置 <code>overflow:hidden</code> 或者<code>overflow:auto</code> 等</p><p>不推荐，简单粗暴，会是盒子里面原本要超出的部分被裁剪掉</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>为什么 <code>BFC</code> 可以让塌陷的父盒子不受浮动影响呢？</p><p>先搞清 <code>BFC</code> 是啥?</p><blockquote><p>Block Fomartting Context , 块级格式化上下文 , BFC 是规定内部块级元素的一个环境，一个规则。内部独立渲染不影响外部，反之亦然。</p></blockquote><p>他由三个概念组成：</p><h4 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h4><p>约束的对象为内部的块级元素</p><h4 id="Fomartting-（格式-规则）"><a href="#Fomartting-（格式-规则）" class="headerlink" title="Fomartting （格式 规则）"></a>Fomartting （格式 规则）</h4><ul><li>一个块级元素独占一行，自上而下排列</li><li>垂直距离 <code>margin</code> 决定，垂直 <code>margin</code> 会重叠</li><li>盒子总是从左侧排列</li></ul><h4 id="Context（上下文-环境）"><a href="#Context（上下文-环境）" class="headerlink" title="Context（上下文 环境）"></a>Context（上下文 环境）</h4><ul><li>容器和内部元素共同构成的环境</li><li>子项平等 相互影响</li><li>子项可以产生新的上下文，套娃</li></ul><p>未完 ~ ~</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你也许不知道的CSS权重</title>
    <link href="/2021/08/11/7.%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E6%9D%83%E9%87%8D/"/>
    <url>/2021/08/11/7.%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E6%9D%83%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<p>看到一个很有意思的CSS权重问题：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;highlight&quot;</span>&gt;</span>测试文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#app</span> <span class="hljs-selector-class">.inner</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-id">#div</span>) <span class="hljs-selector-class">.highlight</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-id">#app</span> <span class="hljs-selector-class">.highlight</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)<span class="hljs-selector-pseudo">:nth-last-of-type</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个 <strong>测试文本</strong> 是什么颜色</p><p>先按照我理解的选择器权重来判断一下</p><blockquote><p><code>!imporntant</code> &gt; 行内（1000）&gt; id (100) &gt; class或者伪类 （10）&gt; 元素或者伪元素(1) &gt; *</p></blockquote><p>这样算下来:</p><ul><li><p>第一个权重总和是 100 + 10 * 2 + 10 = 130</p></li><li><p>第二个权重总和是 100 + 10 * 3 = 130</p></li></ul><p>第二个在后面，就近原则么~ 我选择第二个 是<span style="color:#2980b9">蓝色</span></p><p>但是测试下来是<span style="color:#c0392b">红色</span>的</p><h4 id="我不知道的CSS权重细节"><a href="#我不知道的CSS权重细节" class="headerlink" title="我不知道的CSS权重细节"></a>我不知道的CSS权重细节</h4><blockquote><p>要特别注意 <code>:not()</code> 伪类，在优先级计算中不会被看作是伪类，但是在计算选择器数量时会把 <strong>其中的选择器</strong> 当做普通选择器进行计数</p><p>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not"><code>:not()</code></a>）对优先级没有影响。（但是，在 <code>:not()</code> 内部声明的选择器会影响优先级） –<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity">MDN</a></p></blockquote><p>再回首看题目重新计算权重</p><ul><li>权重为：100 (<code>#app</code>) + 10 (<code>.inner</code>) + 100 (<code>#div</code>) + 10 (<code>.highlight</code>) = 220</li><li>权重为：100 (<code>#app</code>) + 10 (<code>.highlight</code>) + 10 (<code>:nth-of-type(1)</code>) + 10 (<code>:nth-last-of-type(1)</code>) = 130</li></ul><p>所以最终颜色为<span style="color:#c0392b">红色</span>， interesting</p><h4 id="not"><a href="#not" class="headerlink" title=":not()"></a><code>:not()</code></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">伪类</a> <strong><code>:not()</code></strong> 用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为<em>反选伪类</em>（<em>negation pseudo-class</em>）。</p></blockquote><ul><li><p><code>:not(.foo)</code> 将匹配任何非 <code>.foo</code> 的元素，包括<code>html</code> <code>body</code></p><p>这意味着<code>:not(.foo)</code> 是给非 <code>.foo</code> 的元素加权重的，自身没有权重的作用，受到<code>html</code> <code>body</code>影响会使自身继承样式</p><p>比如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>测试文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">p</span>) &#123;<br>   <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>自身也变成了<span style="color:#c0392b">红色</span>，为了避免影响，就必须给自身一点权重，如：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">p</span>) &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样p就是 <strong>黑色</strong> 了</p></li><li><p>可以利用这个伪类提高规则的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity">优先级</a>。例如， <code>#foo:not(#bar)</code> 和 <code>#foo</code> 会匹配相同的元素，但是前者的优先级更高。 这就是一开始题目使用到的策略</p></li></ul><h4 id="再总结下权重吧"><a href="#再总结下权重吧" class="headerlink" title="再总结下权重吧"></a>再总结下权重吧</h4><ol><li>不同的权重，权重高的生效</li><li> 相同的权重：就近原则，最后一个覆盖之前的</li><li>无论多少个元素组成的选择器，都没有一个class选择器权重高，每个选择器的权重都有上限，就是1000 100 10 1</li><li>反选伪类<code>:not()</code> 自身没有权重，但是他与选择器结合，其中的选择器会有权重，计算不能忽略其中的选择器</li></ol><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><p><a href="https://www.w3cplus.com/css/css-specificity-things-you-should-know.html">你应该知道的一些事情——CSS 权重</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity">优先级 - CSS | MDN</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>you-get+ffmpeg提取视频BGM</title>
    <link href="/2021/05/10/6.you-get+FFMpeg%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91BGM/"/>
    <url>/2021/05/10/6.you-get+FFMpeg%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91BGM/</url>
    
    <content type="html"><![CDATA[<p><code>you-get [URL]</code></p><p><code>ffmpeg -i [input(video)] [ouput(music)]</code></p><p>PS:有空的话我会封装成一个 App 或者做个 Web，以后下歌效率一定提高</p>]]></content>
    
    
    <categories>
      
      <category>整活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>FFMpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome标签脚本</title>
    <link href="/2021/05/09/5-chrome%E6%A0%87%E7%AD%BE%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/05/09/5-chrome%E6%A0%87%E7%AD%BE%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<style>.chromePlugins{    display:block;    position: relative;    margin：5px 0;    color: white !important;    width: 200px;    height: 50px;    border-radius: 50px;    text-align: center;    line-height: 50px;    text-decoration: none !important;    background: linear-gradient(to right,#3498db,#2ecc71,#e67e22,#3498db);    background-size:400%;}body{    background: black;}.chromePlugins:hover{    animation: flow 6s linear infinite;}.chromePlugins:hover::after{    animation: flow 6s linear infinite;    filter: blur(30px);}.chromePlugins::after{    content: "";    position: absolute;    left: -5px;    top: -5px;    right: -5px;    bottom: -5px;    border-radius: 60px;    background: white;    z-index: -1;    background: linear-gradient(to right,#3498db,#2ecc71,#e67e22,#3498db);    background-size:400%;}@keyframes flow{    100%{        background-position: -400%;    }}</style><h4 id="整活背景"><a href="#整活背景" class="headerlink" title="整活背景"></a>整活背景</h4><p>浏览B站或者看微信公众号文章的时候，发现很多好图的时候（尤其是一些纸片人老婆的图），很想将其下载下来。这时候就需要F12审查元素，找到图片链接，再另存到本地。苦于想要的图片实在太多，这样的方法就会显得很笨了。这时候就需要好朋友JS来帮忙了！</p><h4 id="插件宗旨"><a href="#插件宗旨" class="headerlink" title="插件宗旨"></a>插件宗旨</h4><p>没必要的事就不做,必要的事就尽快做。–《冰菓》</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>书签可以在网址处插入一段 <code>javascript:</code> 开头的JS片段，来作为脚本使用</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>如下书签直接拖动到浏览器书签栏中即可使用</p><h4 id="插件大全（持续更新中）"><a href="#插件大全（持续更新中）" class="headerlink" title="插件大全（持续更新中）"></a>插件大全（持续更新中）</h4><ul><li><p>获取B站视频封面</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:window.open(document.querySelector('[itemprop=\'image\']').content)">获取B站视频封面</a><div></li><li><p>获取微信文章封面</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:let imgUrl=document.querySelector('[property=\'twitter:image\']').content;window.open(imgUrl)">获取微信文章封面</a><div></li><li><p>网页双屏</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:document.write('<HTML><HEAD></HEAD><FRAMESET COLS=\'50%25,*\'><FRAME SRC=' + location.href + '><FRAME SRC=' + location.href + '></FRAMESET></HTML>')">网页双屏</a><div></li><li><p>加速播放</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:document.querySelector('video').playbackRate=15">加速播放</a><div></li><li><p>微博全部取关</p><div style="margin:20px 0;">  <a class="chromePlugins" href="javascript:$(\'.btn_link.S_txt1\').click();$$(\'.member_li\').forEach(l=>l.click());$(\'.W_btn_a[node-type=\'cancelFollowBtn\']\').click();$(\'[node-type=\'ok\']\').click();">微博全部取关</a><div></li></ul>]]></content>
    
    
    <categories>
      
      <category>整活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探究数组方法的使用技巧</title>
    <link href="/2021/04/14/3.%E6%8E%A2%E7%A9%B6%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/04/14/3.%E6%8E%A2%E7%A9%B6%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="探究数组方法的使用技巧"><a href="#探究数组方法的使用技巧" class="headerlink" title="探究数组方法的使用技巧"></a>探究数组方法的使用技巧</h1><h2 id="转字符方法"><a href="#转字符方法" class="headerlink" title="转字符方法"></a>转字符方法</h2><h3 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString"></a>Array.prototype.toString</h3><p><code>Array.prototype.toString</code> 数组无论被嵌套多少层都会被转成 <code>String</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">4</span>], <span class="hljs-number">1</span>];<br>arr.toString(); <span class="hljs-comment">//1,2,3,4,4,1</span><br></code></pre></div></td></tr></table></figure><h3 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join"></a>Array.prototype.join</h3><p><code>Array.prototype.join</code> 将数组各成员按照某字符串进行连接并且装换成 <code>String</code>，与<code>String.prototype.split</code> 相对应</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arr.join()); <span class="hljs-comment">//1,2,3</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot;&quot;</span>)); <span class="hljs-comment">//123</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//1 2 3</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot;-&quot;</span>)); <span class="hljs-comment">//1-2-3</span><br></code></pre></div></td></tr></table></figure><h2 id="堆栈方法"><a href="#堆栈方法" class="headerlink" title="堆栈方法"></a>堆栈方法</h2><h3 id="Array-prototype-push-Array-prototype-pop"><a href="#Array-prototype-push-Array-prototype-pop" class="headerlink" title="Array.prototype.push Array.prototype.pop"></a>Array.prototype.push Array.prototype.pop</h3><p><code>Array.prototype.push</code> 数组末尾添加元素 ，返回长度</p><p><code>Array.prototype.pop</code> 数组末尾去除元素 ，返回去除项</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arr, arr.push(<span class="hljs-number">5</span>)); <span class="hljs-comment">//[ 1, 2, 3, 5 ] 4</span><br><span class="hljs-built_in">console</span>.log(arr, arr.pop()); <span class="hljs-comment">//[ 1, 2, 3 ] 5</span><br></code></pre></div></td></tr></table></figure><h3 id="Array-prototype-unshift-Array-prototype-shift"><a href="#Array-prototype-unshift-Array-prototype-shift" class="headerlink" title="Array.prototype.unshift Array.prototype.shift"></a>Array.prototype.unshift Array.prototype.shift</h3><p><code>Array.prototype.unshift</code> 数组头部添加元素 ，返回长度</p><p><code>Array.prototype.shift</code> 数组头部去除元素 ，返回去除项</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arr, arr.unshift(<span class="hljs-number">5</span>)); <span class="hljs-comment">//[ 5, 1, 2, 3 ] 4</span><br><span class="hljs-built_in">console</span>.log(arr, arr.shift()); <span class="hljs-comment">//[ 1, 2, 3 ] 5</span><br></code></pre></div></td></tr></table></figure><blockquote><p>堆栈方法均改变原数组</p></blockquote><h2 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h2><h3 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse"></a>Array.prototype.reverse</h3><p><code>Array.prototype.reverse </code> 排序和其中元素大小无关，反转数组，<strong>改变原数组</strong> ， 视觉上反转数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arr, arr.reverse()); <span class="hljs-comment">//[ 3, 2, &#x27;a&#x27; ] [ 3, 2, &#x27;a&#x27; ]</span><br></code></pre></div></td></tr></table></figure><h3 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a>Array.prototype.sort</h3><p><code>Array.prototype.sort</code></p><p>当<code>arr.sort()</code>不传入函数时，会将数组数组中的各元素转成 <code>String</code> , 再按照每个 <code>String</code> 的 <code>Unicode</code> 编码大小比较，进行升序排列，<strong>改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">50</span>];<br><span class="hljs-built_in">console</span>.log(&#123;<br>  a: <span class="hljs-string">&quot;a&quot;</span>.charCodeAt(),<br>  c: <span class="hljs-string">&quot;c&quot;</span>.charCodeAt(),<br>  <span class="hljs-number">1</span>: <span class="hljs-string">&quot;1&quot;</span>.charCodeAt(),<br>  <span class="hljs-number">50</span>: <span class="hljs-string">&quot;50&quot;</span>.charCodeAt(), <span class="hljs-comment">//&#123; &#x27;1&#x27;: 49, &#x27;50&#x27;: 53, a: 97, c: 99 &#125;</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(arr.sort()); <span class="hljs-comment">//[ 1, 50, &#x27;a&#x27;, &#x27;c&#x27; ]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>针对元素为数字字符串和数字的排序</p></blockquote><p><code>Array.prototype.sort </code> 为 <strong>高阶函数</strong> ，给其传入一个 <strong>回调函数</strong> ，根据返回值不同可以控制 <em>升序</em> 或者 <em>降序</em></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">50</span>];<br><span class="hljs-built_in">console</span>.log(<br>  arr.sort(<br>    (a, b) =&gt; a - b <span class="hljs-comment">// 返回a-b，即为从小到大，升序排列  //返回b-a，即为从大到小，降序排列</span><br>  )<br>);<br></code></pre></div></td></tr></table></figure><h2 id="拼接方法"><a href="#拼接方法" class="headerlink" title="拼接方法"></a>拼接方法</h2><h3 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat"></a>Array.prototype.concat</h3><p><code>Array.prototype.concat </code> 主要用于拼接数组，<strong>返回新数组，不改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-built_in">console</span>.log(arr.concat(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)，arr); <span class="hljs-comment">// [ 1, 2, 1, 2 ] [ 1, 2 ]</span><br><span class="hljs-built_in">console</span>.log(arr.concat([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])，arr); <span class="hljs-comment">// [ 1, 2, 1, 2 ] [ 1, 2 ]</span><br><span class="hljs-built_in">console</span>.log(arr.concat([<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>])，arr); <span class="hljs-comment">// [ 1, 2, 1,[ 2 ]] [ 1, 2 ]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>等价于使用 <strong>展开运算符</strong> 拼接数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.log([...arr, ...arr1]); <span class="hljs-comment">//[ 1, 2, 1, 2 ]</span><br></code></pre></div></td></tr></table></figure><h2 id="删改方法"><a href="#删改方法" class="headerlink" title="删改方法"></a>删改方法</h2><h3 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice"></a>Array.prototype.slice</h3><p><code>Array.prototype.slice(start,end) </code> 从数组<code>start</code>项截取到<code>end</code>项，左闭右开，返回截取元素组成的新数组，<strong>不改变原数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(arr.slice(), arr); <span class="hljs-comment">//[ 1, 2, 3, 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">0</span>), arr); <span class="hljs-comment">//[ 1, 2, 3, 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>), arr); <span class="hljs-comment">//[ 2, 3, 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(-<span class="hljs-number">1</span>), arr); <span class="hljs-comment">//[ 4 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), arr); <span class="hljs-comment">//[ 2, 3 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(-<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>), arr); <span class="hljs-comment">//[ 2, 3 ] [ 1, 2, 3, 4 ]</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>), arr); <span class="hljs-comment">//[] [ 1, 2, 3, 4 ] end&gt;start则返回空数组</span><br></code></pre></div></td></tr></table></figure><h3 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice"></a>Array.prototype.splice</h3><p><code>Array.prototype.splice(start,删除的个数,添加的值) </code> 可以删除或添加值，返回删除的值，<code>改变原数组</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>), arr); <span class="hljs-comment">//[ 1, 2 ] [ 4, 3 ]</span><br></code></pre></div></td></tr></table></figure><h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><h3 id="Array-prototype-indexOf-amp-Array-prototype-lastIndexOf"><a href="#Array-prototype-indexOf-amp-Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.indexOf &amp; Array.prototype.lastIndexOf"></a>Array.prototype.indexOf &amp; Array.prototype.lastIndexOf</h3><p><code>Array.prototype.index</code> 正向查询某值在数组中的位置，有即返回索引</p><p><code>Array.prototype.lastIndexOf</code> 反向查询某值在数组中的位置，有即返回索引</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(arr.lastIndexOf(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 3</span><br></code></pre></div></td></tr></table></figure><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes"></a>Array.prototype.includes</h3><p><code>Array.prototype.includes</code> 查询是否有值，有即返回 <code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">2</span>)); <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈冒泡和捕获</title>
    <link href="/2021/04/01/2.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
    <url>/2021/04/01/2.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>了解冒泡和捕获之前，先要了解什么是事件和事件流</p></blockquote><span id="more"></span><p><strong>事件</strong> ：事件是可以被JS检测到的行为，当我们与页面交互时，事件就会产生</p><p><strong>事件流</strong> ：触发事件会产生事件流，单个元素受到影响后会传播给其他元素，事件流描述的是页面中接受事件的顺序，分为<strong>冒泡</strong>和<strong>捕获</strong></p><h4 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a><strong>冒泡</strong></h4><blockquote><p>一个子元素触发事件后，事件会从该子元素起一层一层向上传播，从下往上</p></blockquote><pre><code class=" mermaid">graph BTdiv --&gt; body --&gt; html --&gt; document</code></pre><h4 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h4><blockquote><p>一个子元素触发事件后，事件会从最顶层父级一层一层向下传播，从下往上</p></blockquote><pre><code class=" mermaid">graph TBdocument --&gt; html --&gt; body --&gt; div</code></pre><h4 id="三种事件监听函数下的事件流"><a href="#三种事件监听函数下的事件流" class="headerlink" title="三种事件监听函数下的事件流"></a>三种事件监听函数下的事件流</h4><p>1.直接在<code>html</code>中定义事件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        #father&#123;<br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: blue;</span><br>        &#125;<br>        #son&#123;<br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: red;</span><br>        &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;father&#x27;)&quot;</span>&gt;</span> //点击#father而不点击#son 只会输出father<br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;son&#x27;)&quot;</span>&gt;</span> // 点击#son 依次输出son father，属于冒泡<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>结论：直接在<code>html</code>中定义事件只会冒泡</p><p>2.<code>DOM0 </code>级 事件 </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      #father &#123;<br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br>      &#125;<br>      #son &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br>      &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span>  //点击#father而不点击#son 只会输出father<br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  // 点击#son 依次输出son father，属于冒泡<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      <br><span class="javascript">      father.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;father&quot;</span>);</span><br>      &#125;;<br>      <br><span class="javascript">      son.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;      </span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;son&quot;</span>);</span><br>      &#125;;<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>结论：<code>dom0</code> 只会冒泡</p><blockquote><p>html行内绑定事件和dom0级别一样 </p></blockquote><p>3.<code>DOM2</code>级 事件 </p><blockquote><p> <code>dom2 </code> 级格式为 <code>el.addEventListener(&#39;click&#39;,fn,false)</code> 其中 <code>dom2 </code>级第三个默认 <code>false</code>，改为 <code>true</code> 就变为事件捕获。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      #father &#123;<br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: blue;</span><br>      &#125;<br>      #son &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: red;</span><br>      &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>      father.addEventListener(<br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br>        () =&gt; &#123;<br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;father&quot;</span>);</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-literal">true</span></span><br>      );<br>    <br>      son.addEventListener(<br><span class="javascript">        <span class="hljs-string">&quot;click&quot;</span>,</span><br>        () =&gt; &#123;<br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;son&quot;</span>);</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-literal">true</span></span><br>      );<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>都是 <code>true</code> 的时候，father 和 son 都是捕获，输出father son，点击father 只输出 father</p></li><li><p>都是 <code>false</code> 的时候，father 和 son 都是冒泡，输出son father，点击father 只输出 father</p></li><li><p>father 事件监听函数参数为 <code>true</code> , son 事件监听函数参数为 <code>false</code> 时，father 为捕获，son 为冒泡，输出father son，点击father 只输出 father</p></li><li><p>father 事件监听函数参数为 <code>false</code>, son 事件监听函数参数为 <code>true</code> 时，son为捕获，father为冒泡，输出son father，点击father 只输出 father</p></li></ul><blockquote><p>总结：</p><p>事件流的模型是自上而下捕获，到达目标，然后再自下而上冒泡。就像小球从空中落地再弹起。<br>1.事件捕获阶段<br>2.处于目标阶段<br>3.事件冒泡阶段</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于防抖和节流</title>
    <link href="/2021/03/30/1.%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2021/03/30/1.%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖  debounce"></a>防抖  <span class="label label-primary">debounce</span></h2><p class="note note-primary">在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。</p><p><code>防抖</code> 类似于游戏里的 <code>施法前摇</code> ，只有当前摇吟唱事件结束时，才能触发技能。</p><p><strong>实际场景</strong>：在输入框里输入一段文字，不断触发某事件，如向后台一直发送数据，故需要防抖来控制此时不断执行的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>);<br><br><span class="hljs-keyword">let</span> timer;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">300</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>          <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;<br>          timer = <span class="hljs-built_in">setTimeout</span>(fn, delay);<br>    &#125;;<br>&#125;<br><br>input.onkeydown = debounce(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(input.value), <span class="hljs-number">1000</span>); <br></code></pre></div></td></tr></table></figure><p>利用闭包封装一个 <code>debounce</code> 函数,从而达到1s内在 <code>input</code> 框反复按键里不会触发事件，若停下按键操作1s后触发事件。</p><!-- more --><h2 id="节流-throttling"><a href="#节流-throttling" class="headerlink" title="节流 throttling"></a>节流 <span class="label label-success">throttling</span></h2><p class="note note-success">每隔一段时间，只执行一次函数。</p><p><code>节流</code> 类似于游戏里的 <code>技能CD</code> ，一段时间只执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttling</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">1000</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.apply(<span class="hljs-built_in">this</span>,<span class="hljs-built_in">arguments</span>)<br>      timer = <span class="hljs-literal">null</span>;<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><br>div.ondrag = throttling(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(e.offsetX));<br></code></pre></div></td></tr></table></figure><p>利用闭包封装一个 <code>throttling</code> 函数,从而达到拖拽 <code>div</code> 时每1s触发一次事件。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元素居中挑战</title>
    <link href="/2021/03/30/0.%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E6%8C%91%E6%88%98/"/>
    <url>/2021/03/30/0.%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E6%8C%91%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="元素居中挑战"><a href="#元素居中挑战" class="headerlink" title="元素居中挑战"></a>元素居中挑战</h2><blockquote><p>看看自己能写出多少种元素居中的方法，持续更新中</p></blockquote><p>需要呈现的效果如下，宽高 500px 的正方形盒子里面居中拜访一个 200px 的盒子</p><img src="http://qx7w7gwom.hn-bkt.clouddn.com/center.png" style="zoom:50%;" /><h3 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h3><p>把父元素变成弹性盒子，然后设置<code>justify-content: center;</code> 和 <code>align-items: center;</code> 让子元素居中</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h3><p>和<code>Flex</code> 一样</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="定位-translate"><a href="#定位-translate" class="headerlink" title="定位 + translate"></a>定位 + translate</h3><p>先通过父相子绝让 <code>son</code> 绝对定位，设置子元素的 <code>top</code> 和 <code>left</code> 的值为 50%（注意此时百分比的参照物是父元素），子元素左上角的点位于元素中间，在让子元素相对自身向左上各移动 50% <code>transform: translate(-50%, -50%)</code> （translate 的百分比参照自身）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  -moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  -ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  -o-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="定位-margin"><a href="#定位-margin" class="headerlink" title="定位 + margin"></a>定位 + margin</h3><p>子元素绝对定位，并且设置子的<code>top</code> <code>left</code> <code>right</code> <code>bottom</code> 均为 0，这其实是设置了子元素所占的空间位置，在设置 <code>margin：auto</code> 实现上下左右居中</p><p>参考：<a href="https://stackoverflow.com/questions/28080910/what-does-top-0-left-0-bottom-0-right-0-mean">What does “top: 0; left: 0; bottom: 0; right: 0;” mean?</a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">margin</span>: auto;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="calc-margin-或者-定位"><a href="#calc-margin-或者-定位" class="headerlink" title="calc() + margin 或者 定位"></a>calc() + margin 或者 定位</h3><p>calc(50% - 子元素一半宽度（高度)）可以的出居中所需宽高，其中calc中的百分数指的是相对于父元素的大小设定的比率</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="伪元素-inline-block-vertical-align"><a href="#伪元素-inline-block-vertical-align" class="headerlink" title="伪元素 + inline-block +  vertical-align"></a>伪元素 + inline-block +  vertical-align</h3><p>利用行内块元素 <code>vertical-align: middle;</code> 垂直中心对齐原理，伪元素宽度设为 0，实现视觉上只有一个元素。伪元素也可以用一个空盒子替代，与为了清除浮动创造一个空盒子的思想类似。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><span class="hljs-selector-class">.parent</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>暂时先这6种方法，以后想到了再补充 ~ ~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
